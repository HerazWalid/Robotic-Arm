#include <SoftwareSerial.h>
#include <Stepper.h>
#include <Servo.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TCS34725.h>
#include <Adafruit_I2CDevice.h>

#define RX_PIN 2
#define TX_PIN 3


#define STEPPER_PIN_1 8
#define STEPPER_PIN_2 10
#define STEPPER_PIN_3 9
#define STEPPER_PIN_4 11
#define STEPPER_PIN_5 4
#define STEPPER_PIN_6 6
#define STEPPER_PIN_7 5
#define STEPPER_PIN_8 7
#define STEPPER_PIN_9 A0
#define STEPPER_PIN_10 A2
#define STEPPER_PIN_11 A1
#define STEPPER_PIN_12 A3

#define SERVO_PIN 12
Servo servo;

#define STEPS_PER_REVOLUTION 128
#define STEPS_PER_REVOLUTION_2 128
#define STEPS_PER_REVOLUTION_3 128
#define SPEED 60
#define SPEED_2 60
#define SPEED_3 60

#define FORWARD 'f'
#define FORWARD2 'p'
#define FORWARD3 'g'

#define REVERSE 'r'
#define REVERSE2 'n'
#define REVERSE3 'l'

#define Color_Detection_Value 15000    //here I just wrote a random value

SoftwareSerial bluetooth(RX_PIN, TX_PIN);

Stepper stepper(STEPS_PER_REVOLUTION, STEPPER_PIN_1, STEPPER_PIN_2, STEPPER_PIN_3, STEPPER_PIN_4);
Stepper stepper2(STEPS_PER_REVOLUTION_2, STEPPER_PIN_5, STEPPER_PIN_6, STEPPER_PIN_7, STEPPER_PIN_8);
Stepper stepper3(STEPS_PER_REVOLUTION_3, STEPPER_PIN_9, STEPPER_PIN_10, STEPPER_PIN_11, STEPPER_PIN_12);

Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_16X);

void setup() {
  Serial.begin(9600);

  bluetooth.begin(9600);

  stepper.setSpeed(SPEED);
  stepper2.setSpeed(SPEED_2);
  stepper3.setSpeed(SPEED_3);

  servo.attach(SERVO_PIN);

  if (!tcs.begin()) {
    Serial.println("Could not find a valid TCS34725 sensor, check wiring!");
    while (1);
    
  }
}

void loop() {

  uint16_t r, g, b, c;;
  tcs.getRawData(&r, &g, &b, &c);
  Serial.print("R: "); Serial.print(r); 
  Serial.print(" G: "); Serial.print(g);
  Serial.print(" B: "); Serial.print(b);
  Serial.print(" C: "); Serial.print(c);
  delay(1000);

  if (bluetooth.available()) {
    char command = (char)bluetooth.read();

    Serial.println(command);

    
    switch (command) {
      case FORWARD:
        stepper.step(STEPS_PER_REVOLUTION);
        
        break;
      case REVERSE:
        stepper.step(-STEPS_PER_REVOLUTION);
        
        break;
      case FORWARD2:
        stepper2.step(STEPS_PER_REVOLUTION_2);
        
        break;
      case REVERSE2:
        stepper2.step(-STEPS_PER_REVOLUTION_2);
           
        break;
      case FORWARD3:
        stepper3.step(STEPS_PER_REVOLUTION_3);

        break;
      case REVERSE3:
        stepper3.step(-STEPS_PER_REVOLUTION_3);

        break;     
      case 'o':
        servo.write(0);

        break;     
      case 'c':
        servo.write(180);
        break;


      case 'h':  // h stands for hmer 
      servo.write(0);
      stepper.step(-2048);
      stepper2.step(-2048);
      stepper3.step(-2048);   
      if (r > Color_Detection_Value) {
    Serial.println("Red detected!");
    stepper.step(0);
    stepper2.step(2048);
    stepper3.step(2048);
    servo.write(180);}
      else {
    stepper.step(STEPS_PER_REVOLUTION);
    
    Serial.println();
    delay(10);
    }

        break;
      case 'k':  // k stands for khder
      servo.write(0);
      stepper.step(-2048);
      stepper2.step(-2048);
      stepper3.step(-2048);
      if (g > Color_Detection_Value ) {
    Serial.println("green detected!");
    stepper.step(0);
    stepper2.step(2048);
    stepper3.step(2048);
    servo.write(180); }
      else {
    stepper.step(STEPS_PER_REVOLUTION);
    Serial.println();
    delay(10);

    }
        break;
      case 'z': // z stands for zreg 
      servo.write(0);
      stepper.step(-2048);
      stepper2.step(-2048);
      stepper3.step(-2048);
      if (b > Color_Detection_Value) {
    Serial.println("Blue detected!");
    stepper.step(0);
    stepper2.step(2048);
    stepper3.step(2048);
    servo.write(180); }
      else {
    stepper.step(STEPS_PER_REVOLUTION);
    Serial.println();
    delay(10);
    }

          break;
      case 'x':
        float x, y, z;
        scanf("%f%f%f",&x,&y,&z);
        bluetooth.readBytes((uint8_t*)&x, sizeof(x));
        bluetooth.readBytes((uint8_t*)&y, sizeof(y));
        bluetooth.readBytes((uint8_t*)&z, sizeof(z));
        moveArm(x, y, z);
        break;

      default:
        Serial.println("Error: unrecognized command");

        break;
    }
  }
}
void moveArm(float x, float y, float z) {

  float l1 = 8; 
  float theta1 = atan2(y, x);
  float l = sqrt(x * x + y * y);
  float h = sqrt(l * l + z * z);
  float phi = atan(z / l);
  float alpha = acos((h / 2) / l1);
  float theta2 = phi + alpha;
  float theta3 = phi - alpha;



  
  float steps1 = (float) (theta1 * STEPS_PER_REVOLUTION / (2 * PI));
  float steps2 = (float) (theta2 * STEPS_PER_REVOLUTION_2 / (2 * PI));
  float steps3 = (float) (theta3 * STEPS_PER_REVOLUTION_3 / (2 * PI));

  servo.write(0);
  delay(500);
  stepper.step(steps1);
  stepper2.step(steps2);
  stepper3.step(steps3);
  delay(500);
  servo.write(180);

}
